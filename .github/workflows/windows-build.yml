name: Windows Build & Release

on:
  push:
    branches: [main]
    tags:
      - '*'
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo registry and git
        uses: actions/cache@v3
        with:
          path: |
            C:\Users\Runner\AppData\Local\cargo\registry
            C:\Users\Runner\AppData\Local\cargo\git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust components
        run: rustup component add clippy rustfmt

      - name: Cache Chocolatey packages (optional)
        uses: actions/cache@v3
        with:
          path: C:\ProgramData\chocolatey\lib-bad
          key: ${{ runner.os }}-choco-packages
          restore-keys: ${{ runner.os }}-choco-packages

      - name: Install dependencies via Chocolatey
        shell: cmd
        run: |
         choco install -y visualstudio2022buildtools visualstudio2022-workload-vctools visualstudio2022-workload-nativedesktop visualstudio2022-component-vc-tools-spectre cmake || exit 0

      - name: Add CMake to PATH
        shell: pwsh
        run: |
         $cmake = "C:\Program Files\CMake\bin"
         echo "$cmake" | Out-File -Append -FilePath $env:GITHUB_PATH


      - name: Download Vulkan SDK Installer
        run: |
          $VulkanVersion = "1.3.275.0"
          $VulkanUrl = "https://sdk.lunarg.com/sdk/download/$VulkanVersion/windows/VulkanSDK-$VulkanVersion-Installer.exe"
          Invoke-WebRequest -Uri $VulkanUrl -OutFile VulkanSDK-Installer.exe
          if (Test-Path '.\VulkanSDK-Installer.exe') { Write-Host "Downloaded installer found." } else { Write-Error "Installer not found!" }

      - name: Install Vulkan SDK Silently (try several flags)
        shell: pwsh
        run: |
         $installed = $false
         $argsList = @("/S /ALLUSERS", "/SILENT /ALLUSERS", "/VERYSILENT /ALLUSERS")
         foreach ($args in $argsList) {
         Write-Host "Trying silent install with argument: $args"
         try {
         Start-Process -FilePath ".\VulkanSDK-Installer.exe" -ArgumentList $args -Wait -NoNewWindow
         if (Test-Path "C:\VulkanSDK") {
          $installed = $true
          Write-Host "Vulkan SDK installed successfully."
          break
         }
         } catch {
         Write-Host "Silent install with $args failed. Trying next."
         }
         }
         if (-not $installed) {
         Write-Host "Vulkan SDK install appears to have failed or was not necessary. Continuing build."
         }


      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Enable Long Paths Support
        run: |
          git config --system core.longpaths true
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Build Zed release
        run: cargo build --workspace --release

      - name: Upload built binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-windows-release
          path: target/release/zed.exe

      - name: Create GitHub Release on tag push
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          artifacts: target/release/zed.exe
          token: ${{ secrets.GITHUB_TOKEN }}
